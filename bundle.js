!function(g){var I={};function n(e){if(I[e])return I[e].exports;var t=I[e]={i:e,l:!1,exports:{}};return g[e].call(t.exports,t,t.exports,n),t.l=!0,t.exports}n.m=g,n.c=I,n.d=function(g,I,e){n.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:e})},n.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},n.t=function(g,I){if(1&I&&(g=n(g)),8&I)return g;if(4&I&&"object"==typeof g&&g&&g.__esModule)return g;var e=Object.create(null);if(n.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:g}),2&I&&"string"!=typeof g)for(var t in g)n.d(e,t,function(I){return g[I]}.bind(null,t));return e},n.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return n.d(I,"a",I),I},n.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},n.p="/how-many-of-you/",n(n.s=1)}([function(module,exports,__webpack_require__){eval("/**\n * SVGInject - Version 1.2.1\n * A tiny, intuitive, robust, caching solution for injecting SVG files inline into the DOM.\n *\n * https://github.com/iconfu/svg-inject\n *\n * Copyright (c) 2018 INCORS, the creators of iconfu.com\n * @license MIT License - https://github.com/iconfu/svg-inject/blob/master/LICENSE\n */\n\n(function(window, document) {\n  // constants for better minification\n  var _CREATE_ELEMENT_ = 'createElement';\n  var _GET_ELEMENTS_BY_TAG_NAME_ = 'getElementsByTagName';\n  var _LENGTH_ = 'length';\n  var _STYLE_ = 'style';\n  var _TITLE_ = 'title';\n  var _UNDEFINED_ = 'undefined';\n  var _SET_ATTRIBUTE_ = 'setAttribute';\n  var _GET_ATTRIBUTE_ = 'getAttribute';\n\n  var NULL = null;\n\n  // constants\n  var __SVGINJECT = '__svgInject';\n  var ID_SUFFIX = '--inject-';\n  var ID_SUFFIX_REGEX = new RegExp(ID_SUFFIX + '\\\\d+', \"g\");\n  var LOAD_FAIL = 'LOAD_FAIL';\n  var SVG_NOT_SUPPORTED = 'SVG_NOT_SUPPORTED';\n  var SVG_INVALID = 'SVG_INVALID';\n  var ATTRIBUTE_EXCLUSION_NAMES = ['src', 'alt', 'onload', 'onerror'];\n  var A_ELEMENT = document[_CREATE_ELEMENT_]('a');\n  var IS_SVG_SUPPORTED = typeof SVGRect != _UNDEFINED_;\n  var DEFAULT_OPTIONS = {\n    useCache: true,\n    copyAttributes: true,\n    makeIdsUnique: true\n  };\n  // Map of IRI referenceable tag names to properties that can reference them. This is defined in\n  // https://www.w3.org/TR/SVG11/linking.html#processingIRI\n  var IRI_TAG_PROPERTIES_MAP = {\n    clipPath: ['clip-path'],\n    'color-profile': NULL,\n    cursor: NULL,\n    filter: NULL,\n    linearGradient: ['fill', 'stroke'],\n    marker: ['marker', 'marker-end', 'marker-mid', 'marker-start'],\n    mask: NULL,\n    pattern: ['fill', 'stroke'],\n    radialGradient: ['fill', 'stroke']\n  };\n  var INJECTED = 1;\n  var FAIL = 2;\n\n  var uniqueIdCounter = 1;\n  var xmlSerializer;\n  var domParser;\n\n\n  // creates an SVG document from an SVG string\n  function svgStringToSvgDoc(svgStr) {\n    domParser = domParser || new DOMParser();\n    return domParser.parseFromString(svgStr, 'text/xml');\n  }\n\n\n  // searializes an SVG element to an SVG string\n  function svgElemToSvgString(svgElement) {\n    xmlSerializer = xmlSerializer || new XMLSerializer();\n    return xmlSerializer.serializeToString(svgElement);\n  }\n\n\n  // Returns the absolute url for the specified url\n  function getAbsoluteUrl(url) {\n    A_ELEMENT.href = url;\n    return A_ELEMENT.href;\n  }\n\n\n  // Load svg with an XHR request\n  function loadSvg(url, callback, errorCallback) {\n    if (url) {\n      var req = new XMLHttpRequest();\n      req.onreadystatechange = function() {\n        if (req.readyState == 4) {\n          // readyState is DONE\n          var status = req.status;\n          if (status == 200) {\n            // request status is OK\n            callback(req.responseXML, req.responseText.trim());\n          } else if (status >= 400) {\n            // request status is error (4xx or 5xx)\n            errorCallback();\n          } else if (status == 0) {\n            // request status 0 can indicate a failed cross-domain call\n            errorCallback();\n          }\n        }\n      };\n      req.open('GET', url, true);\n      req.send();\n    }\n  }\n\n\n  // Copy attributes from img element to svg element\n  function copyAttributes(imgElem, svgElem) {\n    var attribute;\n    var attributeName;\n    var attributeValue;\n    var attributes = imgElem.attributes;\n    for (var i = 0; i < attributes[_LENGTH_]; i++) {\n      attribute = attributes[i];\n      attributeName = attribute.name;\n      // Only copy attributes not explicitly excluded from copying\n      if (ATTRIBUTE_EXCLUSION_NAMES.indexOf(attributeName) == -1) {\n        attributeValue = attribute.value;\n        // If img attribute is \"title\", insert a title element into SVG element\n        if (attributeName == _TITLE_) {\n          var titleElem;\n          var firstElementChild = svgElem.firstElementChild;\n          if (firstElementChild && firstElementChild.localName.toLowerCase() == _TITLE_) {\n            // If the SVG element's first child is a title element, keep it as the title element\n            titleElem = firstElementChild;\n          } else {\n            // If the SVG element's first child element is not a title element, create a new title\n            // ele,emt and set it as the first child\n            titleElem = document[_CREATE_ELEMENT_ + 'NS']('http://www.w3.org/2000/svg', _TITLE_);\n            svgElem.insertBefore(titleElem, firstElementChild);\n          }\n          // Set new title content\n          titleElem.textContent = attributeValue;\n        } else {\n          // Set img attribute to svg element\n          svgElem[_SET_ATTRIBUTE_](attributeName, attributeValue);\n        }\n      }\n    }\n  }\n\n\n  // This function appends a suffix to IDs of referenced elements in the <defs> in order to  to avoid ID collision\n  // between multiple injected SVGs. The suffix has the form \"--inject-X\", where X is a running number which is\n  // incremented with each injection.  References to the ids are adjusted accordingly.\n  // We assume tha all ids within the injected SVG are unique, therefore the same suffix can be used for all ids of one\n  // injected SVG.\n  function makeIdsUnique(svgElem) {\n    var idSuffix = ID_SUFFIX + uniqueIdCounter++;\n    // Get all elements with an id. The SVG spec recommends to put referenced elements inside <defs> elements, but\n    // this is a requirement, therefore we have to search for IDs in the whole SVG.\n    var idElements = svgElem.querySelectorAll('[id]');\n    var idElem;\n    var tagName;\n    var iriTagNames = {};\n    var iriProperties = [];\n    var changed = false;\n    var i, j;\n\n    for (i = 0; i < idElements[_LENGTH_]; i++) {\n      idElem = idElements[i];\n      tagName = idElem.localName; // Use non-namespaced tag name\n      // Make ID unique if tag name is IRI referenceable\n      if (tagName in IRI_TAG_PROPERTIES_MAP) {\n        changed = true;\n        iriTagNames[tagName] = 1;\n        // Add suffix to element's id\n        idElem.id += idSuffix;\n        // Replace ids in xlink:ref and href attributes\n        ['xlink:href', 'href'].forEach(function(refAttrName) {\n          var iri = idElem[_GET_ATTRIBUTE_](refAttrName);\n          if (/^\\s*#/.test(iri)) { // Check if iri is non-null and has correct format\n            idElem[_SET_ATTRIBUTE_](refAttrName, iri.trim() + idSuffix);\n          }\n        });\n      }\n    }\n\n    // Get all properties that are mapped to the found tags\n    for (tagName in iriTagNames) {\n      (IRI_TAG_PROPERTIES_MAP[tagName] || [tagName]).forEach(function (mappedProperty) {\n        // Add mapped properties to array of iri referencing properties.\n        // Use linear search here because the number of possible entries is very small (maximum 11)\n        if (iriProperties.indexOf(mappedProperty) < 0) {\n          iriProperties.push(mappedProperty);\n        }\n      });\n    }\n\n    // Replace IDs with new IDs in all references\n    if (iriProperties[_LENGTH_]) {\n      // Add \"style\" to properties, because it may contain references in the form 'style=\"fill:url(#myFill)\"'\n      iriProperties.push(_STYLE_);\n      // Regular expression for functional notations of an IRI references. This will find occurences in the form\n      // url(#anyId) or url(\"#anyId\") (for Internet Explorer)\n      var funcIriRegex = /url\\(\"?#([a-zA-Z][\\w:.-]*)\"?\\)/g;\n      // Run through all elements of the SVG and replace ids in references. It seems that getElementsByTagName('*')\n      // performs faster than querySelectorAll('*') in this case.\n      var allElements = svgElem[_GET_ELEMENTS_BY_TAG_NAME_]('*');\n      var element;\n      var propertyName;\n      var value;\n      var newValue;\n      for (i = 0; i < allElements[_LENGTH_]; i++) {\n        element = allElements[i];\n        if (element.localName == _STYLE_) {\n          value = element.textContent;\n          newValue = value && value.replace(funcIriRegex, 'url(#$1' + idSuffix + ')');\n          if (newValue !== value) {\n            element.textContent = newValue;\n          }\n        } else if (element.hasAttributes()) {\n          // Run through all property names for which ids were found\n          for (j = 0; j < iriProperties[_LENGTH_]; j++) {\n            propertyName = iriProperties[j];\n            value = element[_GET_ATTRIBUTE_](propertyName);\n            newValue = value && value.replace(funcIriRegex, 'url(#$1' + idSuffix + ')');\n            if (newValue !== value) {\n              element[_SET_ATTRIBUTE_](propertyName, newValue);\n            }\n          }\n        }\n      }\n    }\n\n    // return boolean if SVG element has been changed\n    return changed;\n  }\n\n  // For alredy cached SVGs ids are made unique by simply replacing the already inserted unique ids with a \n  // higher id counter. This is much more performant as a call to makeIdsUnique().\n  function makeIdsUniqueCached(svgString) {\n    return svgString.replace(ID_SUFFIX_REGEX, ID_SUFFIX + uniqueIdCounter++);\n  }\n\n  // Inject SVG by replacing the img element with the SVG element in the DOM\n  function inject(imgElem, svgElem, absUrl, options) {\n    if (svgElem) {\n      svgElem[_SET_ATTRIBUTE_]('data-inject-url', absUrl);\n      var parentNode = imgElem.parentNode;\n      if (parentNode) {\n        if (options.copyAttributes) {\n          copyAttributes(imgElem, svgElem);\n        }\n        // Invoke beforeInject hook if set\n        var beforeInject = options.beforeInject;\n        var injectElem = (beforeInject && beforeInject(imgElem, svgElem)) || svgElem;\n        // Replace img element with new element. This is the actual injection.\n        parentNode.replaceChild(injectElem, imgElem);\n        // Mark img element as injected\n        imgElem[__SVGINJECT] = INJECTED;\n        removeOnLoadAttribute(imgElem);\n        // Invoke afterInject hook if set\n        var afterInject = options.afterInject;\n        if (afterInject) {\n          afterInject(imgElem, injectElem);\n        }\n      }\n    } else {\n      svgInvalid(imgElem, options);\n    }\n  }\n\n\n  // Merges any number of options objects into a new object\n  function mergeOptions() {\n    var mergedOptions = {};\n    var args = arguments;\n    // Iterate over all specified options objects and add all properties to the new options object\n    for (var i = 0; i < args[_LENGTH_]; i++) {\n      var argument = args[i];\n        for (var key in argument) {\n          if (argument.hasOwnProperty(key)) {\n            mergedOptions[key] = argument[key];\n          }\n        }\n      }\n    return mergedOptions;\n  }\n\n\n  // Adds the specified CSS to the document's <head> element\n  function addStyleToHead(css) {\n    var head = document[_GET_ELEMENTS_BY_TAG_NAME_]('head')[0];\n    if (head) {\n      var style = document[_CREATE_ELEMENT_](_STYLE_);\n      style.type = 'text/css';\n      style.appendChild(document.createTextNode(css));\n      head.appendChild(style);\n    }\n  }\n\n\n  // Builds an SVG element from the specified SVG string\n  function buildSvgElement(svgStr, verify) {\n    if (verify) {\n      var svgDoc;\n      try {\n        // Parse the SVG string with DOMParser\n        svgDoc = svgStringToSvgDoc(svgStr);\n      } catch(e) {\n        return NULL;\n      }\n      if (svgDoc[_GET_ELEMENTS_BY_TAG_NAME_]('parsererror')[_LENGTH_]) {\n        // DOMParser does not throw an exception, but instead puts parsererror tags in the document\n        return NULL;\n      }\n      return svgDoc.documentElement;  \n    } else {\n      var div = document.createElement('div');\n      div.innerHTML = svgStr;\n      return div.firstElementChild;\n    }\n  }\n\n\n  function removeOnLoadAttribute(imgElem) {\n    // Remove the onload attribute. Should only be used to remove the unstyled image flash protection and\n    // make the element visible, not for removing the event listener.\n    imgElem.removeAttribute('onload');\n  }\n\n  function errorMessage(msg) {\n    console.error('SVGInject: ' + msg);\n  }\n\n\n  function fail(imgElem, status, options) {\n    imgElem[__SVGINJECT] = FAIL;\n    if (options.onFail) {\n      options.onFail(imgElem, status);\n    } else {\n      errorMessage(status);\n    }\n  }\n\n\n  function svgInvalid(imgElem, options) {\n    removeOnLoadAttribute(imgElem);\n    fail(imgElem, SVG_INVALID, options);\n  }\n\n\n  function svgNotSupported(imgElem, options) {\n    removeOnLoadAttribute(imgElem);\n    fail(imgElem, SVG_NOT_SUPPORTED, options);\n  }\n\n\n  function loadFail(imgElem, options) {\n    fail(imgElem, LOAD_FAIL, options);\n  }\n\n\n  function removeEventListeners(imgElem) {\n    imgElem.onload = NULL;\n    imgElem.onerror = NULL;\n  }\n\n\n  function imgNotSet(msg) {\n    errorMessage('no img element');\n  }\n\n\n  function createSVGInject(globalName, options) {\n    var defaultOptions = mergeOptions(DEFAULT_OPTIONS, options);\n    var svgLoadCache = {};\n\n    if (IS_SVG_SUPPORTED) {\n      // If the browser supports SVG, add a small stylesheet that hides the <img> elements until\n      // injection is finished. This avoids showing the unstyled SVGs before style is applied.\n      addStyleToHead('img[onload^=\"' + globalName + '(\"]{visibility:hidden;}');\n    }\n\n\n    /**\n     * SVGInject\n     *\n     * Injects the SVG specified in the `src` attribute of the specified `img` element or array of `img`\n     * elements. Returns a Promise object which resolves if all passed in `img` elements have either been\n     * injected or failed to inject (Only if a global Promise object is available like in all modern browsers\n     * or through a polyfill).\n     *\n     * Options:\n     * useCache: If set to `true` the SVG will be cached using the absolute URL. Default value is `true`.\n     * copyAttributes: If set to `true` the attributes will be copied from `img` to `svg`. Dfault value\n     *     is `true.\n     * makeIdsUnique: If set to `true` the id of elements in the `<defs>` element that can be references by\n     *     property values (for example 'clipPath') are made unique by appending \"--inject-X\", where X is a\n     *     running number which increases with each injection. This is done to avoid duplicate ids in the DOM.\n     * beforeLoad: Hook before SVG is loaded. The `img` element is passed as a parameter. If the hook returns\n     *     a string it is used as the URL instead of the `img` element's `src` attribute.\n     * afterLoad: Hook after SVG is loaded. The loaded `svg` element and `svg` string are passed as a\n     *     parameters. If caching is active this hook will only get called once for injected SVGs with the\n     *     same absolute path. Changes to the `svg` element in this hook will be applied to all injected SVGs\n     *     with the same absolute path. It's also possible to return an `svg` string or `svg` element which\n     *     will then be used for the injection.\n     * beforeInject: Hook before SVG is injected. The `img` and `svg` elements are passed as parameters. If\n     *     any html element is returned it gets injected instead of applying the default SVG injection.\n     * afterInject: Hook after SVG is injected. The `img` and `svg` elements are passed as parameters.\n     * onAllFinish: Hook after all `img` elements passed to an SVGInject() call have either been injected or\n     *     failed to inject.\n     * onFail: Hook after injection fails. The `img` element and a `status` string are passed as an parameter.\n     *     The `status` can be either `'SVG_NOT_SUPPORTED'` (the browser does not support SVG),\n     *     `'SVG_INVALID'` (the SVG is not in a valid format) or `'LOAD_FAILED'` (loading of the SVG failed).\n     *\n     * @param {HTMLImageElement} img - an img element or an array of img elements\n     * @param {Object} [options] - optional parameter with [options](#options) for this injection.\n     */\n    function SVGInject(img, options) {\n      options = mergeOptions(defaultOptions, options);\n\n      var run = function(resolve) {\n        var allFinish = function() {\n          var onAllFinish = options.onAllFinish;\n          if (onAllFinish) {\n            onAllFinish();\n          }          \n          resolve && resolve();\n        };\n\n        if (img && typeof img[_LENGTH_] != _UNDEFINED_) {\n          // an array like structure of img elements\n          var injectIndex = 0;\n          var injectCount = img[_LENGTH_];\n\n          if (injectCount == 0) {\n            allFinish();\n          } else {\n            var finish = function() {\n              if (++injectIndex == injectCount) {\n                allFinish();\n              }\n            };\n            \n            for (var i = 0; i < injectCount; i++) {\n              SVGInjectElement(img[i], options, finish);\n            }\n          }\n        } else {\n          // only one img element\n          SVGInjectElement(img, options, allFinish);\n        }\n      };\n\n      // return a Promise object if it is globally available\n      return typeof Promise == _UNDEFINED_ ? run() : new Promise(run);\n    }\n\n\n    // Injects a single svg element. Options must be already merged with the default options.\n    function SVGInjectElement(imgElem, options, callback) {\n      if (imgElem) {\n        var svgInjectAttributeValue = imgElem[__SVGINJECT];\n        if (!svgInjectAttributeValue) {\n          removeEventListeners(imgElem);\n\n          if (!IS_SVG_SUPPORTED) {\n            svgNotSupported(imgElem, options);\n            callback();\n            return;\n          }\n          // Invoke beforeLoad hook if set. If the beforeLoad returns a value use it as the src for the load\n          // URL path. Else use the imgElem src attribute value.\n          var beforeLoad = options.beforeLoad;\n          var src = (beforeLoad && beforeLoad(imgElem)) || imgElem[_GET_ATTRIBUTE_]('src');\n\n          if (!src) {\n            // If no image src attribute is set do no injection. This can only be reached by using javascript\n            // because if no src attribute is set the onload and onerror events do not get called\n            if (src === '') {\n              loadFail(imgElem, options);\n            }\n            callback();\n            return;\n          }\n\n          // set array so later calls can register callbacks\n          var onFinishCallbacks = [];\n          imgElem[__SVGINJECT] = onFinishCallbacks;\n\n          var onFinish = function() {\n            callback();\n            onFinishCallbacks.forEach(function(onFinishCallback) {\n              onFinishCallback();\n            });\n          };\n\n          var absUrl = getAbsoluteUrl(src);\n          var useCacheOption = options.useCache;\n          var makeIdsUniqueOption = options.makeIdsUnique;\n\n          var setSvgLoadCacheValue = function(val) {\n            if (useCacheOption) {\n              svgLoadCache[absUrl].forEach(function(svgLoad) {\n                svgLoad(val);\n              });\n              svgLoadCache[absUrl] = val;\n            }\n          };\n\n          if (useCacheOption) {\n            var svgLoad = svgLoadCache[absUrl];\n\n            var handleLoadValue = function(loadValue) {\n              if (loadValue === LOAD_FAIL) {\n                loadFail(imgElem, options);\n              } else if (loadValue === SVG_INVALID) {\n                svgInvalid(imgElem, options);\n              } else {\n                var hasUniqueIds = loadValue[0];\n                var svgString = loadValue[1];\n                var uniqueIdsSvgString = loadValue[2];\n                var svgElem;\n                \n                if (makeIdsUniqueOption) {\n                  if (hasUniqueIds === NULL) {\n                    // Ids for the SVG string have not been made unique before. This may happen if previous\n                    // injection of a cached SVG have been run with the option makedIdsUnique set to false\n                    svgElem = buildSvgElement(svgString, false);\n                    hasUniqueIds = makeIdsUnique(svgElem);\n\n                    loadValue[0] = hasUniqueIds;\n                    loadValue[2] = hasUniqueIds && svgElemToSvgString(svgElem);\n                  } else if (hasUniqueIds) {\n                    // Make ids unique for already cached SVGs with better performance\n                    svgString = makeIdsUniqueCached(uniqueIdsSvgString);\n                  }\n                }\n\n                svgElem = svgElem || buildSvgElement(svgString, false);\n                    \n                inject(imgElem, svgElem, absUrl, options);\n              }\n              onFinish();\n            };\n\n            if (typeof svgLoad != _UNDEFINED_) {\n              // Value for url exists in cache\n              if (svgLoad.isCallbackQueue) {\n                // Same url has been cached, but value has not been loaded yet, so add to callbacks\n                svgLoad.push(handleLoadValue);\n              } else {\n                handleLoadValue(svgLoad);\n              }\n              return;\n            } else {\n              // \n              var svgLoad = [];\n              // set property isCallbackQueue to Array to differentiate from array with cached loaded values  \n              svgLoad.isCallbackQueue = true;\n              svgLoadCache[absUrl] = svgLoad;\n            }\n          }\n\n          // Load the SVG because it is not cached or caching is disabled\n          loadSvg(absUrl, function(svgXml, svgString) {\n            // Use the XML from the XHR request if it is an instance of Document. Otherwise\n            // (for example of IE9), create the svg document from the svg string.\n            var svgElem = svgXml instanceof Document ? svgXml.documentElement : buildSvgElement(svgString, true);\n\n            var afterLoad = options.afterLoad;\n            if (afterLoad) {\n              // Invoke afterLoad hook which may modify the SVG element. After load may also return a new\n              // svg element or svg string\n              var svgElemOrSvgString = afterLoad(svgElem, svgString) || svgElem;\n              \n              if (svgElemOrSvgString) {\n                // Update svgElem and svgString because of modifications to the SVG element or SVG string in\n                // the afterLoad hook, so the modified SVG is also used for all later cached injections\n                var isString = typeof svgElemOrSvgString == 'string';\n                svgString = isString ? svgElemOrSvgString : svgElemToSvgString(svgElem);\n                svgElem = isString ? buildSvgElement(svgElemOrSvgString, true) : svgElemOrSvgString;\n              }\n            }\n\n            if (svgElem instanceof SVGElement) {\n              var hasUniqueIds = NULL;\n              if (makeIdsUniqueOption) {\n                hasUniqueIds = makeIdsUnique(svgElem);\n              }\n\n              if (useCacheOption) {\n                var uniqueIdsSvgString = hasUniqueIds && svgElemToSvgString(svgElem);\n                // set an array with three entries to the load cache\n                setSvgLoadCacheValue([hasUniqueIds, svgString, uniqueIdsSvgString]);\n              }\n\n              inject(imgElem, svgElem, absUrl, options);\n            } else {\n              svgInvalid(imgElem, options);\n              setSvgLoadCacheValue(SVG_INVALID);\n            }\n            onFinish();\n          }, function() {\n            loadFail(imgElem, options);\n            setSvgLoadCacheValue(LOAD_FAIL);\n            onFinish();\n          });\n        } else {\n          if (Array.isArray(svgInjectAttributeValue)) {\n            // svgInjectAttributeValue is an array. Injection is not complete so register callback\n            svgInjectAttributeValue.push(callback);\n          } else {\n            callback();\n          }\n        }\n      } else {\n        imgNotSet();\n      }\n    }\n\n\n    /**\n     * Sets the default [options](#options) for SVGInject.\n     *\n     * @param {Object} [options] - default [options](#options) for an injection.\n     */\n    SVGInject.setOptions = function(options) {\n      defaultOptions = mergeOptions(defaultOptions, options);\n    };\n\n\n    // Create a new instance of SVGInject\n    SVGInject.create = createSVGInject;\n\n\n    /**\n     * Used in onerror Event of an `<img>` element to handle cases when the loading the original src fails\n     * (for example if file is not found or if the browser does not support SVG). This triggers a call to the\n     * options onFail hook if available. The optional second parameter will be set as the new src attribute\n     * for the img element.\n     *\n     * @param {HTMLImageElement} img - an img element\n     * @param {String} [fallbackSrc] - optional parameter fallback src\n     */\n    SVGInject.err = function(img, fallbackSrc) {\n      if (img) {\n        if (img[__SVGINJECT] != FAIL) {\n          removeEventListeners(img);\n\n          if (!IS_SVG_SUPPORTED) {\n            svgNotSupported(img, defaultOptions);\n          } else {\n            removeOnLoadAttribute(img);\n            loadFail(img, defaultOptions);\n          }\n          if (fallbackSrc) {\n            removeOnLoadAttribute(img);\n            img.src = fallbackSrc;\n          }\n        }\n      } else {\n        imgNotSet();\n      }\n    };\n\n    window[globalName] = SVGInject;\n\n    return SVGInject;\n  }\n\n  var SVGInjectInstance = createSVGInject('SVGInject');\n\n  if (true && typeof module.exports == 'object') {\n    module.exports = SVGInjectInstance;\n  }\n})(window, document);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(g,I,n){g.exports=n(2)},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/style.scss\nvar style = __webpack_require__(3);\n\n// EXTERNAL MODULE: ./node_modules/@iconfu/svg-inject/dist/svg-inject.js\nvar svg_inject = __webpack_require__(0);\nvar svg_inject_default = /*#__PURE__*/__webpack_require__.n(svg_inject);\n\n// CONCATENATED MODULE: ./src/svg.js\nfunction svgAddAttributes (img, svg) {\r\n  svg.setAttribute('viewBox', img.getAttribute('data-viewBox'));\r\n  svg.setAttribute('preserveAspectRatio', 'none');\r\n\r\n  return svg;\r\n}\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/animals.js\nconst _addListener = Symbol('addListener');\r\n\r\nclass Animal {\r\n  constructor (params, parentRef = null) {\r\n    this.animalType = params.animalType;\r\n    this.animalWeight = params.animalWeight;\r\n    this.weightInput = params.weightInput;\r\n    this.allAnimals = parentRef;\r\n    this.$element = document.getElementById(params.animalType);\r\n    this.$image = this.$element !== null ? this.$element.children[0] : null;\r\n    this.active = false;\r\n\r\n    if (this.allAnimals !== null) {\r\n      this[_addListener]();\r\n    }\r\n  }\r\n\r\n  setColor (color) {\r\n    const svgPath = this.$element.children[0].getElementsByTagName('path')[0];\r\n    svgPath.setAttributeNS(null,'style',`fill: ${color}`);\r\n  }\r\n\r\n  isActive (){\r\n    return this.active;\r\n  }\r\n\r\n  getImage () {\r\n    return this.$image;\r\n  }\r\n\r\n  activate () {\r\n    this.active = true;\r\n    this.allAnimals.setActiveAnimal(this);\r\n  }\r\n\r\n  deActivate () {\r\n    this.active = false;\r\n    this.allAnimals.resetActiveAnimal();\r\n  }\r\n\r\n  validate () {\r\n    const $personWeight = this.weightInput.value;\r\n\r\n    return /^([0-1]{0,1}[0-9]{1,2}|200)$/gi.test($personWeight);\r\n  }\r\n\r\n  compare () {\r\n    const $personWeight = this.weightInput.value;\r\n\r\n    const relativeWeight = $personWeight / this.animalWeight;\r\n\r\n    return relativeWeight;\r\n  }\r\n\r\n  [_addListener] (){\r\n    this.$element.addEventListener('click', () => {\r\n\r\n      this.allAnimals.resetAll();\r\n      this.setColor('green');\r\n      this.activate();\r\n    });\r\n  }\r\n}\r\n\r\nclass Animals {\r\n  constructor (animalsList, weightInput, defaultColor = '#000') {\r\n    this.animals = [];\r\n    this.defaultColor = defaultColor;\r\n    this.activeAnimal = null;\r\n    this.weightInput = weightInput;\r\n\r\n    for (const [key, value] of Object.entries(animalsList)) {\r\n      this.createNew (key, value);\r\n    }\r\n  }\r\n\r\n  createNew (animalType, animalWeight) {\r\n    this.animals.push( new Animal({\r\n      'animalType': animalType,\r\n      'animalWeight': animalWeight,\r\n      'weightInput': this.weightInput\r\n    }, this));\r\n  }\r\n\r\n  getAll () {\r\n    return this.animals;\r\n  }\r\n\r\n  setActiveAnimal (animal) {\r\n    this.activeAnimal = animal;\r\n  }\r\n\r\n  resetActiveAnimal () {\r\n    this.activeAnimal = null;\r\n  }\r\n\r\n  resetAll () {\r\n    this.getAll().forEach( it => {\r\n      it.setColor(this.defaultColor);\r\n      it.deActivate();\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/main.js\n\n\n\n\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('./service-worker.js').then( registration => {\n      console.log('ServiceWorker registration successful with scope: ', registration.scope);\n    }).catch( registrationError => {\n      console.log('ServiceWorker registration failed: ', registrationError);\n    });\n  });\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  svg_inject_default()(document.getElementsByClassName('injectable'), {beforeInject: svgAddAttributes});\n});\n\nconst animals = new Animals({\n  'elephant': 2700,\n  'camel': 480,\n  'giraffe': 800,\n  'baboon': 100,\n  'dog': 45,\n  'cat': 4\n}, document.getElementById('weight'));\n\nconst $modal = document.getElementById('myModal');\n\ndocument.getElementById('calc').onclick = function () {\n  const $modalInfo = document.getElementById('info');\n  const $modalImg = document.getElementById('result_img');\n\n  if (animals.activeAnimal === null) {\n    alert('Please select some animal to compare with.');\n    return null;\n  }\n  if (! animals.activeAnimal.validate()) {\n    alert('Please enter correct value into the weight field');\n    return null;\n  }\n  const relativeWeight = animals.activeAnimal.compare();\n\n  $modalInfo.innerHTML = relativeWeight <= 1\n    ? `Your weight is ${Math.trunc(relativeWeight * 100)}%\n      of ${animals.activeAnimal.animalType}'s weight.`\n    : `The ${animals.activeAnimal.animalType}'s mass is ${Math.trunc(1 / relativeWeight * 100)}% \n      of your weight.`;\n\n  $modalImg.setAttribute('src',\n    animals.activeAnimal.getImage().getAttribute('src')\n  );\n  $modalImg.setAttribute('data-viewBox',\n    animals.activeAnimal.getImage().getAttribute('data-viewBox')\n  );\n  svg_inject_default()($modalImg, {beforeInject: svgAddAttributes});\n\n  $modal.style.display = 'block';\n}\n\ndocument.getElementsByClassName('close')[0].onclick = function () {\n  $modal.style.display = 'none';\n}\n\nwindow.onclick = function (event) {\n  if (event.target === $modal) {\n    $modal.style.display = 'none';\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9zdHlsZS5zY3NzPzk5ZjkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4iXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n")}]);